#!/bin/bash
# inst-2018-11-23
#
# Arch install script

# shellcheck disable=SC2002,SC2016
####  ---------------------------------------------------------------------------------------------------------------------------------------
####  SET UP A LOCAL PACMAN CACHE:
####  Symlink (-s) directory :  /var/cache/pacman/pkg/   to   /home/$USER/www/repo/
####  Symlink contents of :     /var/cache/pacman/aur   and   /var/lib/pacman/sync/   to   /home/$USER/www/repo/
####  ---------------------------------------------------------------------------------------------------------------------------------------
####  sudo pacman -Sw --cachedir /home/$USER/www/repo/ --needed base base-devel <all other needed packages>
####  sudo pacman -Syuw --cachedir /home/$USER/www/repo/
####  Install darkhttpd (webfs won't do symlinks) and run: $ darkhttpd /home/$USER/www/repo --port 8080
####  ---------------------------------------------------------------------------------------------------------------------------------------
####  THIS INSTALL:
####  sudo pacman -Sw --cachedir /home/$USER/www/repo/ --needed base base-devel grub wget sudo xorg-server xorg-xinit xterm xorg-fonts xorg-twm \
####  virtualbox-guest-utils virtualbox-guest-modules-arch linux-headers polkit ttf-dejavu ttf-liberation leafpad xfce4 xfce4-goodies gvfs
####  ---------------------------------------------------------------------------------------------------------------------------------------

Fn1=0; Fn2=0; Fn3=0; Fn4=0; Fn5=0; Fn6=0; Fn7=0; Fn8=0; Fn9=0
set -uo pipefail
trap 'S="${?}" ; echo "${0}" : Error on line "${LINENO}" : "${BASH_COMMAND}" ; exit "${S}"' ERR

### Save me from myself! Prevent running on my system in case 'chmod +x' gets set.

if 	[[ $(hostname) = Arch2014p9 ]]; then
	echo " YOU REALLY DO NOT WANT TO RUN THIS "
	exit
fi

#=====#=====# User, password, hostname, editor variables. #===========#

URN="jeff"	## Username      ##
URP="test"	## User Password ##
RTP="test"	## Root Password ##
HTN="Arch2018p12"	## Hostname      ##
EDR="nano"	## Editor        ##

#=====#=====# Partition variables. #===========#

HDD="sda"		## set bootloader location. ##
DDI="/dev/sda"		## set device for disklabel and installation. ##
DLT="msdos"		## set MBR-disklabel type. ##
ROOTP="/dev/sda1"	## set root partition. ##
HOMEP="/dev/sda3"	## set home partition. ##
SWAP="/dev/sda2"	## set swap partition. ##

	umount "${HOMEP}"			|| /bin/true
	umount "${ROOTP}"			|| /bin/true
	swapoff "${SWAP}" 2>/dev/null		|| /bin/true

Partition(){

	parted "${DDI}" mklabel "$DLT"
	parted "${DDI}" mkpart primary ext4 0% 70%
	parted "${DDI}" set 1 boot on
	parted "${DDI}" mkpart primary linux-swap 70% 80%
	parted "${DDI}" mkpart primary ext4 80% 100%
}
formats(){

	yes | mkfs.ext4 "${ROOTP}"
	yes | mkfs.ext4 "${HOMEP}"
	mkswap /dev/sda2
}
mounts(){

	mount  "${ROOTP}"	/mnt
	mkdir -p		/mnt/home
	mount  "${HOMEP}"	/mnt/home
	swapon "${SWAP}"
}

#=====#=====# Local pacman cache/repo & mirrorlist #===========#

setrepos(){

	pacman -Sy --noconfirm --needed reflector wgetpaste moreutils
	echo 'Server = http://192.168.2.2:8080/' > /etc/pacman.d/mirrorlist
	reflector --latest 5 --sort rate >> /etc/pacman.d/mirrorlist
	echo; echo " /etc/pacman.d/mirrorlist in editor next" ; echo
	sleep 5

	cat /etc/pacman.d/mirrorlist | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp /etc/pacman.d/mirrorlist
}
install(){

	pacstrap /mnt   base base-devel grub wget sudo\
			xorg-server xorg-xinit xterm xorg-fonts xorg-twm\
			linux-headers polkit ttf-dejavu ttf-liberation leafpad\
			xfce4 xfce4-goodies gvfs\
			virtualbox-guest-utils virtualbox-guest-modules-arch\

	genfstab -L /mnt > /mnt/etc/fstab
}
Configure(){

	arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/Los_Angeles		/etc/localtime
	arch-chroot /mnt hwclock --systohc

	echo "en_US.UTF-8 UTF-8" >>						/mnt/etc/locale.gen
	arch-chroot /mnt locale-gen

	echo "LANG=en_US.UTF-8" >>						/mnt/etc/locale.conf

	echo "KEYMAP=us" >>							/mnt/etc/vconsole.conf

	echo "${HTN}" >								/mnt/etc/hostname

	echo "127.0.1.1 ${HTN}.localdomain ${HTN}" >>				/mnt/etc/hosts
	echo '# End of file' >>							/mnt/etc/hosts

	arch-chroot /mnt systemctl enable dhcpcd

	arch-chroot /mnt grub-install --target=i386-pc /dev/"${HDD}"
	arch-chroot /mnt grub-mkconfig -o 					/boot/grub/grub.cfg

	arch-chroot /mnt useradd -m -g users -G wheel -s /bin/bash "${URN}"

	echo "${URN}:${URP}" | chpasswd -R /mnt
	echo   "root:${RTP}" | chpasswd -R /mnt

	arch-chroot /mnt systemctl enable systemd-timesyncd.service

	sed -i '/%wheel ALL=(ALL) ALL/s/^#//'					/mnt/etc/sudoers

	cp /mnt/etc/X11/xinit/xinitrc 						/mnt/home/$URN/.xinitrc
	sed -i '/twm/s/^/#/g'         						/mnt/home/$URN/.xinitrc
	sed -i '/xclock/s/^/#/g'      						/mnt/home/$URN/.xinitrc
	sed -i '/xterm/s/^/#/g'       						/mnt/home/$URN/.xinitrc
	echo 'exec startxfce4' >>     						/mnt/home/$URN/.xinitrc
	arch-chroot /mnt chown $URN						    /home/$URN/.xinitrc

	cp /mnt/etc/X11/xinit/xserverrc						/mnt/home/$URN/.xserverrc
	sed -i '/exec/s/^/#/g'							/mnt/home/$URN/.xserverrc
	echo 'exec /usr/bin/Xorg -keeptty -nolisten tcp "$@" vt"$XDG_VTNR"' >>  /mnt/home/$URN/.xserverrc
	arch-chroot /mnt chown $URN						    /home/$URN/.xserverrc
}
mesg(){

	echo " The install is done except verifying and editing config files."
	echo " Answering no here will exit, completing the install."
	echo " Answering no after this will skip the named file/s."; echo
}
asksure(){
		echo -n " Proceed ? (Y/N)"
		while read -r -n 1 -s answer 
		do
			if [[ $answer = [YyNn] ]] ; then 
			   [[ $answer = [Yy] ]] && echo " Answered Yes " && XX=0 && break
			   [[ $answer = [Nn] ]] && echo " Answered No  " && XX=1 && break
			fi
		done
	reset
}
checking1(){
		clear
		echo; echo " Checking ~/.xinitrc in ${EDR}"
		asksure
	if	[[ $XX = 0 ]]; then
		cat /mnt/home/$URN/.xinitrc | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp /mnt/home/"${URN}"/.xinitrc
		reset
			checking2
		else
			checking2 
	fi
}
checking2(){
		clear
		echo; echo " Checking ~/.xserverrc in ${EDR}"
		asksure
	if	[[ $XX = 0 ]]; then
		cat /mnt/home/$URN/.xserverrc | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/home/"${URN}"/.xserverrc
		reset
			checking3
		else
			checking3 
	fi
}
checking3(){
		clear
		echo; echo " Checking /etc/hosts in ${EDR}"
		asksure
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/hosts | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/hosts
		reset
			checking4
		else
			checking4 
	fi
}
checking4(){
		clear
		echo; echo " Checking /etc/sudoers in ${EDR} with visudo"
		asksure 
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/sudoers | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/sudoers
		EDITOR="${EDR}" visudo -c --file=/mnt/etc/sudoers
		reset
			checking5
		else
			checking5
	fi
}
checking5(){
		clear
		echo; echo " Checking /etc/locale.gen in ${EDR}"
		asksure 
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/locale.gen | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/locale.gen
		reset
			checking6
		else
			checking6
	fi
}
checking6(){
		clear
		echo; echo " Checking /etc/locale.conf in ${EDR}"
		asksure 
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/locale.conf | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/locale.conf
		reset
			XX=1
	fi
}
umnts(){
	umount "${HOMEP}"
	umount "${ROOTP}"
	swapoff "${SWAP}"
}

### 'trap' below calls this function. WIP, Not passing vars.
### Func file WORK AROUND for Not passing vars

cleanup(){

if 	[[ $(<Func) != 9 ]]; then
      # (( $Func < 9 )); then
	umount "${HOMEP}"
	umount "${ROOTP}"
	swapoff "${SWAP}"  2>/dev/null
	cat inst.log | tr -cd '\11\12\15\40-\176' > inst.log.bu
	mv inst.log.bu inst.log
	echo; tail -10 inst.log; echo
	echo; echo "Something went wrong. ^ 10 last lines log ^. "
	echo "  Func= $(<Func)"
	pkill -9 inst
	else
	echo; echo " Successfully passed checks and completed cleanup. "; echo; exit
fi
}
### Set trap for script crashes - exits 
### Func file WORK AROUND for Not passing vars

	trap 'cleanup' INT TERM EXIT

###=====### Run Functions ###=====###
{
	Partition	; Fn1=1
	formats		; Fn2=1
	mounts		; Fn3=1 #; Fn1=1; Fn2=1
	setrepos	; Fn4=1
	install		; Fn5=1
	Configure	; Fn6=1
	mesg		; Fn7=1
	asksure		; Fn8=1
	if [[ $XX = 0 ]]; then checking1 ; fi

lurl=$(wgetpaste /root/inst.log 2>/dev/null )
surl=$(wgetpaste -u "${lurl}" 2>/dev/null )

	echo ; echo "Remote log long URL : ${lurl}" >> /mnt/home/"${URN}"/inst.log
	echo "Remote log short URL: ${surl}" >> /mnt/home/"${URN}"/inst.log ; echo
	echo "Remote log long URL : ${lurl}"
	echo "Remote log short URL: ${surl}"
	cat inst.log | tr -cd '\11\12\15\40-\176' > inst.log.bu
	mv inst.log.bu inst.log
	cp /root/inst.log /mnt/home/${URN}/inst.log
	arch-chroot /mnt chown "${URN}" /home/"${URN}"/inst.log
	echo; echo " Install Completed, running checks."; echo

	umnts		; Fn9=1

### Check functions

Fnsum=$((Fn1 + Fn2 + Fn3 + Fn4 + Fn5 + Fn6 + Fn7 + Fn8 + Fn9))

	echo " Fnsum: ${Fnsum}"
	echo "$Fnsum" >Func
	echo " Func :" "$(<Func)"

#=====#=====# Set logging #===========#

} |& tee inst.log

