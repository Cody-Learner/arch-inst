#!/bin/bash
# install script 2021-04-01
# shellcheck disable=SC2002,SC2016,SC2129
# SC2002: Useless cat
# SC2016: Expressions don't expand in single quotes
# SC2129: Consider not using cat > redirect

####  FOR TESTING BACK TO BACK, QUICK SET UP A LOCAL PACMAN PACKAGE CACHE SERVER:
####  ---------------------------------------------------------------------------------------------------------------------------------------
####  Install darkhttpd 
####  Symlink package cache directory for darkhttpd :	$ sudo ln -s  /var/cache/pacman/pkg/    /home/$USER/www/repo/
####  Setup darkhttpd run:				$ darkhttpd /home/$USER/www/repo --port 8080
####  Configure package server IP variable 'LPSP' below
####  sudo pacman -Sw --needed base base-devel + <all other desired packages> 
####  ---------------------------------------------------------------------------------------------------------------------------------------

set -uo pipefail
trap 'S="${?}" ; echo "${0}" : Error on line "${LINENO}" : "${BASH_COMMAND}" ; exit "${S}"' ERR

	## Prevent accidentally running on my system!

if 	[[ $HOSTNAME = Arch2014p9 ]]; then
	echo " YOU REALLY DO NOT WANT TO RUN THIS "
	exit
fi

#==========# User, password, hostname, editor, package server ip variables. #==========#

URN="jeff"					## Username                  ##
URP="test"					## User Password             ##
RTP="test"					## Root Password             ##
HTN="Arch2021p3"				## Hostname                  ##
EDR="nano"					## Editor                    ##
LPSP='Server = http://192.168.2.2:8080/'	## Local Package Server:Port ## Comment this out for none.

#==========# Partition variables. #==========#

HDD="sda"		## set bootloader location. ##
DDI="/dev/sda"		## set device for disklabel and installation. ##
DLT="msdos"		## set MBR-disklabel type. ##
ROOTP="/dev/sda1"	## set root partition. ##
HOMEP="/dev/sda3"	## set home partition. ##
SWAP="/dev/sda2"	## set swap partition. ##

	umount "${HOMEP}" 2>/dev/null		|| /bin/true
	umount "${ROOTP}" 2>/dev/null		|| /bin/true
	swapoff "${SWAP}" 2>/dev/null		|| /bin/true

#==========# SETUP PARTITIONS AND MOUNTS #==========#

Partition(){

	parted "${DDI}" mklabel "$DLT"
	parted "${DDI}" mkpart primary ext4 0% 70%
	parted "${DDI}" set 1 boot on
	parted "${DDI}" mkpart primary linux-swap 70% 80%
	parted "${DDI}" mkpart primary ext4 80% 100%
}
formats(){

	mkfs.ext4 "${ROOTP}"
	mkfs.ext4 "${HOMEP}"
	mkswap /dev/sda2
}

mounts(){

	mount  "${ROOTP}"	/mnt
	mkdir -p		/mnt/home
	mount  "${HOMEP}"	/mnt/home
	swapon "${SWAP}"
}

#==========# SETUP INSTALL ISO FOR RUNNING INSTALL SCRIPT #==========#

setrepos(){

	pacman -Sy 2>/dev/null
	pacman -S --noconfirm --needed reflector wgetpaste moreutils

	echo "${LPSP}"										> /etc/pacman.d/mirrorlist
	echo "Running reflector may take some time..."
	reflector --latest 5 --country 'United States' --protocol https --sort rate 2>/dev/null >> /etc/pacman.d/mirrorlist
	echo; echo " mirrorlist in editor next" ; echo
	sleep 5

	cat /etc/pacman.d/mirrorlist | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp /etc/pacman.d/mirrorlist
}

#==========# INSTALL PACKAGES #==========#

install(){

	## BASE VBOX INSTALL. EDIT LIST FOR INSTALLED PACKAGES ##

	pacstrap /mnt   base linux linux-headers linux-firmware grub wget nano openssh sudo fbset terminus-font virtualbox-guest-utils

		# dhcpcd
		# xorg-server xorg-xinit xterm xorg-fonts xorg-twm \
		# polkit ttf-dejavu ttf-liberation leafpad \
		# virtualbox-guest-utils \
		# xfce4 xfce4-goodies gvfs \
		# xorg-server xorg-xinit xterm xorg-fonts xorg-twm \
		# linux-headers polkit ttf-dejavu ttf-liberation leafpad \
		# virtualbox-guest-utils \
		# xfce4 xfce4-goodies gvfs
}

#==========# CONFIGURE SYSTEM #==========#

Configure(){

	genfstab -L /mnt > /mnt/etc/fstab

	arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/Los_Angeles		/etc/localtime
	arch-chroot /mnt hwclock --systohc

	echo "en_US.UTF-8 UTF-8" 						>> /mnt/etc/locale.gen
	arch-chroot /mnt locale-gen

	echo "LANG=en_US.UTF-8" 						>> /mnt/etc/locale.conf

	echo "KEYMAP=us"     							>> /mnt/etc/vconsole.conf
	echo "FONT=ter-118n" 							>> /mnt/etc/vconsole.conf

	echo "${HTN}" 								> /mnt/etc/hostname

	echo '127.0.0.1  localhost'                 				>> /mnt/etc/hosts
	echo '::1        localhost'                 				>> /mnt/etc/hosts
	echo "127.0.1.1	 ${HTN}.localdomain ${HTN}" 				>> /mnt/etc/hosts

#	arch-chroot /mnt systemctl enable dhcpcd

	arch-chroot /mnt grub-install --target=i386-pc /dev/"${HDD}"
	arch-chroot /mnt grub-mkconfig -o 					/boot/grub/grub.cfg

	arch-chroot /mnt useradd -m -G wheel -s /bin/bash "${URN}"

	### echo "root:${RTP}" | chpasswd -R /mnt ### BROKEN - replacement implemented 2021-03-30 ###

	echo "${URN}:${URP}" | arch-chroot /mnt /usr/sbin/chpasswd	|| { echo "set password error" ; exit 1 ; }
	echo   "root:${RTP}" | arch-chroot /mnt /usr/sbin/chpasswd	|| { echo "set password error" ; exit 2 ; }

	arch-chroot /mnt systemctl enable systemd-timesyncd.service

	sed -i '/%wheel ALL=(ALL) ALL/s/^#//'					/mnt/etc/sudoers

	touch /mnt/etc/systemd/network/20-wired.network

	cat <<- EOF 								> /mnt/etc/systemd/network/20-wired.network
	[Match]
	Name=en*
	Name=eth*

	[Network]
	DHCP=yes
EOF
	arch-chroot /mnt systemctl enable systemd-networkd
	arch-chroot /mnt systemctl enable systemd-resolved


	#### Added if statement to see if Xorg is installed and setup accordingle (WITH Xorg). ####

if	[[ -e /mnt/etc/X11/xinit/xinitrc ]]; then

	cp /mnt/etc/X11/xinit/xinitrc						/mnt/home/"${URN}"/.xinitrc
	sed -i '/twm/s/^/#/g'							/mnt/home/"${URN}"/.xinitrc
	sed -i '/xclock/s/^/#/g'      						/mnt/home/"${URN}"/.xinitrc
	sed -i '/xterm/s/^/#/g'       						/mnt/home/"${URN}"/.xinitrc
	echo 'exec startxfce4' >>     						/mnt/home/"${URN}"/.xinitrc
	arch-chroot /mnt chown "${URN}"						/home/"${URN}"/.xinitrc

	cp /mnt/etc/X11/xinit/xserverrc						/mnt/home/"${URN}"/.xserverrc
	sed -i '/exec/s/^/#/g'							/mnt/home/"${URN}"/.xserverrc
	echo 'exec /usr/bin/Xorg -keeptty -nolisten tcp "$@" vt"$XDG_VTNR"' >>  /mnt/home/"${URN}"/.xserverrc
	arch-chroot /mnt chown "${URN}"						/home/"${URN}"/.xserverrc
	arch-chroot /mnt systemctl enable vboxservice.service

    else

	#### (WITHOUT Xorg) Setup a service file to enlarge the vconsole resolution. ####

	touch /mnt/etc/systemd/system/display.service

	cat <<- EOF 								> /mnt/etc/systemd/system/display.service
	[Unit]
	Description=Display resolution
	After=local-fs.target
	DefaultDependencies=no

	[Service]
	Type=simple
	ExecStart=/usr/bin/fbset -xres 1730 -yres 970

	[Install]
	WantedBy=multi-user.target

EOF
	arch-chroot /mnt systemctl enable display.service

	echo ; echo "THIS IS A BASE, NO X INSTALL. KEEP THIS IN MIND FOR UPCOMING FILE CHECKS." ; echo
	sleep 5
fi
}

mesg(){

	echo " The install is done except verifying and editing config files."
	echo " Answering no here will exit, completing the install."
	echo " Answering no after this will skip the named file/s."; echo
}

asksure(){
		echo -n " Proceed ? (Y/N)"
		while read -r -n 1 -s answer 
		do
			if [[ $answer = [YyNn] ]] ; then 
			   [[ $answer = [Yy] ]] && echo " Answered Yes " && XX=0 && break
			   [[ $answer = [Nn] ]] && echo " Answered No  " && XX=1 && break
			fi
		done
	reset
}

#==========# CHECK CONFIG FILES WITH OPTION TO EDIT #==========#

checking1(){
		clear
		echo; echo " Checking ~/.xinitrc in ${EDR}"
		asksure
	if	[[ $XX = 0 ]]; then
		cat /mnt/home/"${URN}"/.xinitrc | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp /mnt/home/"${URN}"/.xinitrc
		reset
			checking2
		else
			checking2 
	fi
}
checking2(){
		clear
		echo; echo " Checking ~/.xserverrc in ${EDR}"
		asksure
	if	[[ $XX = 0 ]]; then
		cat /mnt/home/"${URN}"/.xserverrc | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/home/"${URN}"/.xserverrc
		reset
			checking3
		else
			checking3 
	fi
}
checking3(){
		clear
		echo; echo " Checking /etc/hosts in ${EDR}"
		asksure
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/hosts | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/hosts
		reset
			checking4
		else
			checking4 
	fi
}
checking4(){
		clear
		echo; echo " Checking /etc/sudoers in ${EDR} with visudo"
		asksure 
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/sudoers | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/sudoers
		EDITOR="${EDR}" visudo -c --file=/mnt/etc/sudoers
		reset
			checking5
		else
			checking5
	fi
}
checking5(){
		clear
		echo; echo " Checking /etc/locale.gen in ${EDR}"
		asksure 
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/locale.gen | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/locale.gen
		reset
			checking6
		else
			checking6
	fi
}
checking6(){
		clear
		echo; echo " Checking /etc/locale.conf in ${EDR}"
		asksure 
	if	[[ $XX = 0 ]]; then
		cat /mnt/etc/locale.conf | EDITOR="${EDR}" vipe | awk '{print}' >tmp && mv tmp  /mnt/etc/locale.conf
		reset
			XX=1
	fi
}

#==========# UNMOUNT PARTITIONS  #==========#

umnts(){

	cp inst.log /mnt/home/"${URN}"/install.log

	umount "${HOMEP}"
	umount "${ROOTP}"
	swapoff "${SWAP}"
}

#==========# Run Functions #==========#

## Group bracket below for logging ##
{

	Partition
	formats
	mounts
	setrepos
	install
	Configure
	mesg
	asksure
	if [[ $XX = 0 ]]; then checking1 ; fi
	umnts
	echo ; echo " Install log available, run 'less inst.log'"
	echo " and has been copied to new install /home/${URN}"/install.log ; echo

#==========# Set logging #==========#

} |& tee inst.log
